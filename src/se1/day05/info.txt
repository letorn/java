局部内部类
	将类定义在方法,类似局部变量

匿名内部类
	常用.可以在任意地方声明,就像一般的实例化语句
	语法现象:
		Data d = new Data(){
			类体的实现
		};
	匿名类是对原类的继承,同时实例化一个对象.{}中就是继承以后的类体
	类体中可以使用所有类的语法
	
	注意:匿名类不能写构造器
	
	匿名类可以从接口或抽象类继承,同时需要实现所有抽象方法
	
	使用环境:
		当需要实现某接口或继承某个类,但这个类的实例只用一次
		
============================================================================================================================
java中的日期与时间
	java中的时间类有:Date和Calendar
	java中的时间类本质:
		long + 操作
	时间的标准
		GMT long 格林威治时间 1970年的元旦开始
		UTC      协调世界时
	java中基本时间表示:GMT long 从1970年的元旦到当前系统时间的毫秒值
	java中提供的Date类表示时间和日期
		Date就是对long值的包装
	Calendar是历法的抽象
		历法:公历,农历,太阳历
	GreGorianCalendar:是历法的实现,采用的是公历算法实现
	Date和Calendar都有默认值,默认值为当前系统时间
		
===========================================================================================================================	
java中描述时间的三种类型间的转换
	long to Date      从long转换为Date
	Date to long
	
	Date to Calendar  从Date转换为Calendar
	Calendar to Date
	
===========================================================================================================================
日期的输入与输出
	日期的输入: 将一个日期格式的String转化为Date
	日期的输出:将一个Date以特定的日期格式转化为String
	
	java中使用java.text.SimpleDateFormat来进行日期的输入与输出
	
	构建一个SimpleDateFormat一定要指定日期的格式.
	日期格式:是一个字符串,字符串中有一些含有特殊意义的字符来描述时间
	
	例如:
		yyyy    以4位数字表示年
		yy      以2位数字表示年
		
	    MM      以2位数字表示月
	    
	    dd      以2位数字表示日
	    
	    hh      以2位数字表示时
	    
	    mm      以2位数字表示分
	    
	    ss      以2位数字表示秒
	    
	    "yyyy-MM-dd hh:mm:ss"此字符串中的-与:及空格不属于时间格式的特殊字符,那么他们就按原意输出
	    
	    SimpleDateFormat的两个重要方法:
	    	日期的输入
	    	parse(String date):将date字符串所描述的时间以给定的日期格式进行解析,并转化为对应的Date对象
	    	
	    	日期的输出
	    	format(Date date): 将date对象所描述的时间以给定的日期格式转化为字符串
	    	
================================================================================================
数字格式化
	DecimalFormat 可以对数字进行输入输出
	格式化字符:
		#:这一位数字必须有
		0:这一位数字可以有
	两个关键方法:
		parse(String str):将数字格式的字符串转换为对应的数字
		format():将数字转换为特定格式的字符串
	类似的还有一个类:NumberFormat
	
================================================================================================
异常(Exception)
	什么是异常:异常是行为(方法,过程)的意外结果
	
	一个方法如果声明抛出异常,那么调用此方法就就处理异常
	抛出异常声明:
		public void xxx() throws [异常类型]{
		}
		
	所有的异常都继承自Exception,换句话说,Exception是所有异常的父类
	
	处理异常有两种方式:
		1 使用try catch finally 块来捕获并处理异常
		2 继续抛出异常
		
	try catch finally块
	使用此种做法称之为:捕获异常
	
	try是尝试执行代码块,如果有异常发生,会被随后的catch部分捕获,异常发生后的代码[不会执行]!
	
	catch代码块用于捕获异常并处理异常,需要提供适当的处理代码.
		异常的处理代码应与业务有关
		catch块可以出现多次,来捕获并处理不同种类的异常.
		注意:catch捕获的异常有大小顺序,子类靠前,父类靠后的原则
		有些时候,我们直接使用Exception进行catch的捕获异常种类的声明,这样代码简洁,但是语义模糊
	
	finally代码块,不管是否出现异常都要[强制]执行的!
		finally经常用于处理收尾工作,比如,在出现错误后关闭数据库连接
		
	try{
		一个人生病了,抛出了一个异常(病:手破了)
	}catch(肠道感染){
		吃消炎药
	}catch(消化系统){
		开刀
	}catch(病){
		等死
	}
	
	注意:若方法中有throw代码(抛出异常动作),那么该方法必须添加throws定义
	
	异常的分类
		Throwable
			|
			|---Error  系统级错误(JVM),不可恢复,程序不可控
			|	|
			|	|---OutoutMemoryError  堆内存溢出
			|
			|---Exception  程序级错误,程序可 检查并处理
				|
				|---IOException  IO异常,输入输出异常
				|
				|---RuntimeException  运行时异常,注意!!!非检查异常,java忽略对此类异
					|
					|---NullPoint
					
					
	关于异常的分类:
		1:Error是JVM级别错误,程序不可控
		2:Exception 程序级错误
			检查异常:在编译期间,会检查此类异常是否被捕获
			非检查异常(RuntimeException):程序运行期间发生
			
================================================================================
自定义异常
	程序会使用大量的自定义异常,自定义异常要继承Exception,一般要手工继承父类的构造器
	
	用途:
	  java定义的异常不足以描述当前程序发生的所有情况,对这种异常的一个封装,来满足需求
	  
	  不是异常,是程序需求的逻辑错误,通常会使用自定义异常来描述此类问题
			
	
	
	
	
	
	
	
	
	