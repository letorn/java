String API:
		charAt():给定位置返回这个字符
		length():返回当前字符串的长度
		trim()  :去除字符串两边的[空白]
		toLowerCase():将字符串小写化(只针对英文)
		toUpperCase():将字符串大写化
		indexOf():判断给定的字符在字符串中第一次出现的位置
		lastIndexOf():判断给定的字符在字符串中最后一次出现的位置
		endsWith():是否以给定的字符串结尾
		startsWith():是否以给定的字符串开始
		subString():根据指定的内容拆分字符串
		toCharArray();将字符串转换为char数组

字符串中支持的正则表达式
		s.matches(): 匹配字符串s是否符合给定的正则表达式格式
		s.split()  : 拆分字符串.可以根据一个正则表达式拆分
		s.replaceAll():将字符处串s中符合正则表达式描述的内容替换
					      为给定的字符串

正则表达式
	正则表达式:描述字符串的格式规则.
	[]              表示其中一个内容	
	[1234] 			表示 1 2 3 4其中之一
	[abcdef]        表示a,b,c,d,e,f其中之一
	[a-z]			表示任意一个小写字母
	[0-9]			表示任意一个数字
	[0-9a-fA-F]		表示任意一个16进制数
	[^12]           表示除了1和2的其他内容
	
	\d				代表任意数字 [0-9]
	.               代表任意字符
	\w				表示单词字符[0-9a-zA-Z_]
	\s				表示一个空白:\t \n \r \b \p
	\D				除了\d
	\W				除了\w
	\S				除了\s
	
	{m,n}			量词:m到n个    m和n必须是数字,m要小于n
	{m,}				m个以上
	{m}					m个
	?				量词:0到1个  {0,1}
	+                    1个以上 {1,}
	*					 0个以上 {0,}
	()				可以将多个表达式当做一项
	|				项与项之间的或关系
正则表达式以 "^"开头 以"$"结尾

	邮政编码:6位数字		^[0-9][0-9][0-9][0-9][0-9][0-9]$
						^[0-9]{6}$				
						^\d{6}$
	
	用户名:8-10个单词字符  ^[0-9a-zA-Z]{8,10}$
						^\w{8,10}$	
		
	手机号码:+86 13810000000
		   0086 13810000000
		    	13810000000
			^(\+86|0086)?$	要么出现+86要么出现0086要么不出现
			
			^\s?$			空白出现0-1次	
			
			^(\+86\s|0086\s)?$
	
			^(\+86\s|0086\s)?\d{11}$
					+86 13810000000
					+86 99999999999 
	
	身份证:
			[0-9xX]         要么是数字要么是大写或小写的X
			(\d{2}[0-9xX])  两位数字后要么是数字要么是大小写X
			
			^\d{15}(\d{2}[0-9xX])?$
	
	email:	xx12xx@hotmail.com.cn
			FANCQ@TARENA.COM.cn

			\w+@\w+(\.[a-zA-Z]{2,3})+
			

字符串缓冲
StringBuffer和StringBuilder
	StringBuffer和StringBuilder的区别在于
				StringBuilder不是线程安全的
				StringBuffer是线程安全的
				
		StringBuilder是java1.5以后新增加的
		StringBuffer是java1.0就存在的
	
		StringBuilder与StringBuffer的方法几乎一样
	
		String:char[] + 操作    			char[]不可变
		StringBuilder: char[] + 操作 	char[]可变

	StringBuffer和StringBuilder的内部char[]是可变的,所以对其中
	的字符串修改就是修改内部的这个char[],若长度不够,会使用数组的
	变长算法自行维护char[]的长度,自动进行扩容工作

	append()方法:向当前字符串后追加新字符串.
				 功能等同于字符串的 += 操作
	insert()方法:向当前字符串中插入新字符串.
	delete()方法:从当前字符串中删除部分内容






	
	
	
	
	
		