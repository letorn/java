JAVA IO 输入输出

File类
  	java.io.File用于描述文件或目录,通过File可以操作硬盘上的文件或目录
  	
  	File仅用于描述文件或目录,不能对内容进行访问
  	File可以描述文件或目录的名字,大小等
  	
  	File常用的API
  		File(String path):构造方法，创建代表指定地址的文件或目录的File对象
  		length():返回文件的长度
  		lastModified():最后修改时间
  		getName():文件或目录名
  		getPath():获取路径
  		exists():文件或目录是否存在
  		ifFile():判断File对象是否为一个文件
  		isDirctory():判断File对象是否为一个目录
  		mkdir():创建目录
  		mkdirs():创建目录及所有未创建的上级目录
  		delete():删除文件或目录
  		createNewFile:创建文件
  		listFile():获取当前目录下的所有子项
  		
===============================================================================
RandomAccessFile
	RandomAccessFile类是JAVA提供的功能丰富的文件访问类,它提供了
	众多功能的方法来访问文件内容,也可以写数据.它支持"随机访问"方式
	可以访问文件的"任意位置"
	
	java文件模型:
		在硬盘上的文件byte by byte .字节形式保存
		
	打开文件:
		有两种打开文件的模式:"rw"读写,"r"只读
		new RandomAccessFile(file,"rw");
		
	RandomAccessFile对文件内容的操作是基于指针的!
	打开文件是默认情况下指针是指向文件开头的pointer = 0;
	
	写入方法:
		raf.write(int data) 写入[一个字节]
		写入的是int值的[低八位],指针自动向下移动,准备再次写入
		
	读取方法:
		int data = raf.read() 从指针指向的位置读取当前字节(8位)
		当返回值为-1时,说明读取到文件末尾了(无内容了)
		
		为什么用int值来描述一个byte
		因为当文件读取到末尾时,返回的是-1,这个-1是int值的-1,也就是说
		是32个1,而byte的-1是8个1,为了避免使用-1代表文件末尾与读取数据
		的-1值冲突,所以使用int作为返回值
	
	文件操作完毕一定要关闭RandomAccessFile
	

	
	
	
	
	 
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		
  		