字符串的序列化(文字编码方案)
	String本质上就是char[]
	将char[]转换为byte序列.也叫字符串序列化
	char类型16位无符号整数,值是unicode编码
	
	UTF-16BE:
	使用两个字节描述一个字符,将16位的char从中间切开
	UTF-16BE是将unicode编码的char[]转换为byte序列的编码方案
	例如:char[] = ['A','B','中']
		byte[] = [00,41,00,42,4e,2d]
		
		UTF-16BE编码只能够支持65535个字符编码
		
	UTF-8:(常用)
		采用变长编码1-n方案,其中英文占1个字节,中文占3个字节

	较为常用的:
		GBK:中国的国标支持20000+个中日韩英字符,英文1个字节,中文2个字节.
			与unicode编码不兼容.需要转换
		gb2312:简体中文编码
		iso8859-1:西欧常用的字符编码
			
===============================================================================
文本与文本文件
	java中的文本:char,16位无符号整数,是字符的unicode编码
	
	文件:byte by byte 字节序列.
	文本文件:是文本char按照某种特定的编码方案序列化的byte序列存储结果
	
===============================================================================
字符流(Reader and Writer)
	字符流以字符(unicode编码)为单位读写数据
	字符流底层依然是使用字节形式读写

字符流的基本实现(高级流):
	InputStreamReader:完成byte解析为char的流,按照编码解析,File ==> byte ==> char ==> 程序,字符输入沇
	OutputStreamWriter:完成从char编码为byte的流,按照编码解析
	
	BufferedReader:缓冲字符输入流
	PrintWriter:缓冲字符输出流
	
	注意:
		对于所有的缓冲输出流,无论是字节流还是字符流都应注意,在所有写操作完成以后,在关闭流之前,
		  应调用流的flush()方法,清空缓冲区(将缓冲区内容全部写),否则可能会发生数据写出不完整!
	
===============================================================================
对象序列化
	对象序列化:将一个对象转换为byte序列,反之叫对象的反序列化
	
	对象序列化与反序列化的流:
		ObjectInputStream:用作反序列化对象的,readObject()
		
		ObjectOutputStream:用作对象序列化的,writeObject(Object obj)
		
	注意:不是所有类的对象都可以序列化,只有实现了[序列化接口]的类的对象才可以序列化
	
	序列化接口:Serializable,此接口没有任何抽象方法,这个接口只是为了标示其子类可以被序列化.

	对象的序列化与反序列化结合使用,可以实现对象的[深层复制]
	
	实现序列化接口的类需要定义一个常量serialVersionUID.
		这个属性的值可以任意写,作用是进行版本控制.防止反序列化的对象与当前这个对象所属类在内
		容上有冲突而导致反序列化异常
		
===============================================================================

BufferedInputStream
ZipInputStream  解压缩流,能够方便的读取zip文件
JarInputStream
CipherInputStream  解密流

DataInputStream  基本数据输入流
ObjectInputStream  对象反序列化流
InputStreamReader  字符输入流

===============================================================================
java多线程
	1 java语言的一个优势就是使用多线程比较简单
	2 一般操作系统都支持同时运行多个任务,一个任务通常就是一个[程序].
	3 每个运行的程序被称为一个[进程],程序内容通常也同时运行多任务,那么每个任务称为[线程]
	
	程序:指令+数据的byte序列.比如:qq.exe
	进程:正在运行的程序,是程序动态运行的过程
	    (操作系统级别的任务,运行在内存中)
	线程:在进程内部,并发运行的过程(程序级别的任务)
	并发:进程是并发运行的,线程也是并发运行的,OS将时间划分为很多时间片段(时间片),尽可能均匀的分配给每个正在执行的任务.
	    微观上进程或线程都是走走停停的,宏观上是都在运行.这种现象称之为并发,但不是绝对意义上的同时运行

	任务>程序>进程>线程

















		
		
		
		
		
		
		
		
		
		
		
		
		
		